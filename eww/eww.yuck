
(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")

(defvar     apps            "{}")

(defwidget bar [screen]
  (centerbox :orientation "v"
    (box :class "segment-top"
    	 :valign "start"
      (top :screen screen))
    (box :valign "center"
         :class "middle" 
      (middle :screen screen))
    (box :valign "end"
         :class "segment-bottom" 
      (bottom :screen screen))))

(defwidget top [screen]
(box :orientation "v"
       :valign "end"
       :space-evenly true
       :spacing "40"
       (workspaces)
       (systray :class "tray" :icon-size 18 :pack-direction "ttb")))


(defwidget workspaces []
  (eventbox :valign "start"
            :onscroll "bash ${EWW_CONFIG_DIR}/scripts/change-active-workspace.sh {} ${current_workspace}"
            :class "workspaces-widget"
    (box :space-evenly true
    	 :orientation "v"
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (label :class {workspace.id == current_workspace ? "current" : ""}
                 :text " ${workspace.windows > 0 ? "◆" : "◇"} "))))))



(defwidget car []
    (box :orientation "v"
       :valign "end"
       :space-evenly true
       :spacing "5"
	(workspaces)))

(defwidget middle [] (time))
(defwidget time []
  (eventbox
    :onclick "eww open --toggle media"
  (box :orientation "v" 
       :class "time"
    hour min sec)))


(defwidget metric [icon ?font-size]
  (box :class "metric" 
       :orientation "v"
    (label :class "metric-icon" 
           :style {font-size != "" ? "font-size: ${font-size}rem;" : ""} 
           :text icon)
    (children)))

(defwidget bottom [screen] 
  (box :orientation "v"
       :valign "end"
       :space-evenly true
       :spacing "5"

    (volume)

    (metric :icon "" 
            :font-size 0.9
      "${round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}%")

    (metric :icon ""
	    :font-size 0.9	
      "${round(EWW_RAM.used_mem_perc, 0)}%")

    (metric :icon "" 
	    :font-size 0.95
	    :font-family "material"  
    	"${round(EWW_CPU.avg, 0)}%")

    (box :class "metric" (date))))


(defwidget music-button []
  (button :onclick "playerctl play-pause"
    "${music_data == '▶' ? '\\⏸' : music_data.status == 'Playing' ? '\\⏸' : '▶'}"))


;(defpoll music-button :interval "2s")

(defwidget volume []
  (box :class "volume-metric"
       :orientation "v"
       :space-evenly false
       :valign "fill"
       :vexpand false
    (scale :orientation "h" 
           :min 0
           :max 101 
           :onchange "pamixer --set-volume $(echo {} | sed 's/\\..*//g')"
           :value volume)
    (eventbox :onscroll "if [ '{}' == 'up' ]; then pamixer -i 5; else pamixer -d 5; fi"
              :vexpand true
              :valign "fill"
      (box :orientation "v"
           :valign "fill"
           :vexpand true
        (button :onclick "playerctl play-pause"
          (label :style "font-size: 1.3em; font-family: Symbols Nerd Font"
                 :text audio_sink))
        (button :onclick "pavucontrol &"
          "${volume}")))))

(deflisten volume :initial "0" "./audio.sh volume")

; TODO make this not hacky
(defvar audio_sink "")



(defwidget large-sym [sym]
  (label :class "metric-icon large-symbol" :text sym))

(defwidget date []
  (eventbox :onhover "sleep 0.1; swaync-client -t"
  (box :orientation "v" 
       :halign "center"
    day_word day month year)))


(deflisten music_data 
  :initial `{"status": ""}`
  `
  playerctl          metadata --format '{ "status": "{{status}}", "artist": "{{artist}}", "title": "{{title}}"}' || echo '{"status": ""}';
  # playerctl --follow metadata --format '{ "status": "{{status}}", "artist": "{{artist}}", "title": "{{title}}"}'
  `)

(defpoll hour :interval "1s" "date +%H")
(defpoll min  :interval "1s" "date +%M")
(defpoll sec  :interval "1s" "date +%S")

(defpoll day_word :interval "10m" "date +%a | tr [:upper:] [:lower:]")
(defpoll day      :interval "10m" "date +%d")
(defpoll month    :interval "1h"  "date +%m")
(defpoll year     :interval "1h"  "date +%y")


(defwindow bar
  :monitor 0
  :exclusive true 
  :geometry (geometry 
    :height "1080px"
    :x "0px" :y "0px"
    :width "38px"
    :anchor "left center"
  )
  :stacking "fg"
  :windowtype "dock"
(bar :screen 1)
)

(deflisten  mpris           `scripts/mpris.py`)
(deflisten  mpris_positions `scripts/positions.py`)

(include    "yuck/widgets.yuck")
(include    "yuck/windows.yuck")
(include    "yuck/setup.yuck")

